<common:LayoutAwarePage
    x:Name="pageRoot"
    x:Class="MyApps.DeviceList.DeviceItemGroupedItemsPage"
    DataContext="{Binding DefaultViewModel, RelativeSource={RelativeSource Self}}"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:MyApps.DeviceList"
    xmlns:common="using:MyApps.DeviceList.Common"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <Page.Resources>

        <!--
            このページで表示されるグループ化されたアイテムのコレクションは、グループ内のアイテムを
            仮想化できないため、完全なアイテム リストのサブセットにバインドされます
        -->
        <CollectionViewSource
            x:Name="groupedItemsViewSource"
            Source="{Binding Path=Groups.ItemsMap}"
            IsSourceGrouped="true"
            ItemsPath="Value"/>

        <local:DateTimeOffsetValueConverter x:Key="DateTimeOffsetValueConverter">
        </local:DateTimeOffsetValueConverter>

        <local:GroupTypeVisibilityValueConverter 
            x:Key="GroupTypeByConnectionVisibleConverter" 
            GroupType="ByConnection" 
            VisibilityIfEqual="Visible"
            VisibilityIfNotEqual="Collapsed" />
        <local:GroupTypeVisibilityValueConverter 
            x:Key="GroupTypeByConnectionCollapsedConverter" 
            GroupType="ByConnection" 
            VisibilityIfEqual="Collapsed"
            VisibilityIfNotEqual="Visible" />

        <common:BooleanToVisibilityConverter x:Key="BooleanToVisiblityConverter" />
        <common:NegativeBooleanToVisibilityConverter x:Key="NegativeBooleanToVisiblityConverter" />
        <common:BooleanNegationConverter x:Key="BooleanNegationConverter" />

        <!-- GridView用 -->
        <DataTemplate x:Key="MyGroupedItemTemplateBasedOnStandard250x250ItemTemplate">
            <Grid Width="250" Height="150"
                Background="{StaticResource ListViewItemPlaceholderBackgroundThemeBrush}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                
                <Image Source="{Binding Path=ThumbnailBitmapImage}" 
                       Grid.Column="0"
                       HorizontalAlignment="Center" VerticalAlignment="Center"
                       Margin="15,0,0,0"
                       Width="100"/>
                <TextBlock Text="{Binding DisplayName}" 
                           Grid.Column="1"
                           TextWrapping="Wrap"
                           HorizontalAlignment="Center" VerticalAlignment="Center"
                           Foreground="{StaticResource ListViewItemOverlayForegroundThemeBrush}" 
                           Style="{StaticResource TitleTextStyle}" 
                           Margin="15,0,15,0"/>
            </Grid>
        </DataTemplate>

        <!-- Semantic Zoomの縮小表示 -->
        <DataTemplate x:Key="MyGroupedItemTemplateForSemanticZoomOut">
            <Grid
                Width="294" Height="94"
                Margin="3"
                VerticalAlignment="Center"
                Background="{StaticResource ListViewItemPlaceholderBackgroundThemeBrush}">
                <TextBlock 
                    Text="{Binding Group.Key}" 
                    TextWrapping="Wrap"
                    Margin="10"
                    VerticalAlignment="Center"
                    HorizontalAlignment="Center"
                    Foreground="{StaticResource ListViewItemOverlayForegroundThemeBrush}" 
                    Style="{StaticResource GroupHeaderTextStyle}"/>
            </Grid>
        </DataTemplate>

        <!-- Snap時のListView用 -->
        <DataTemplate x:Key="MyGroupedItemTemplateBasedOnStandard80ItemTemplate">
            <Grid Margin="6">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Border Background="{StaticResource ListViewItemPlaceholderBackgroundThemeBrush}" Width="60" Height="60">
                    <Image Source="{Binding ThumbnailBitmapImage}" Stretch="UniformToFill"/>
                </Border>
                <StackPanel Grid.Column="1" Margin="10,0,0,0">
                    <TextBlock Text="{Binding DisplayName}" Style="{StaticResource ItemTextStyle}" MaxHeight="40"/>
                </StackPanel>
            </Grid>
        </DataTemplate>

        <!-- グループのヘッダー用 -->
        <DataTemplate x:Key="MyGroupedItemHeaderTemplate">
            <TextBlock Text="{Binding Path=Key, Converter={StaticResource DateTimeOffsetValueConverter}}"
                       Margin="3,-7,10,10" 
                       Style="{StaticResource GroupHeaderTextStyle}" />
        </DataTemplate>
        
        <!-- このページのGridViewのstyle -->
        <Style x:Key="MyItemsViewStyle" TargetType="GridView">
            <Setter Property="Padding" Value="116,137,40,46" />
            <Setter Property="SelectionMode" Value="Single" />
            <Setter Property="IsSwipeEnabled" Value="False" />
            <Setter Property="Margin" Value="0,6,0,-6" />
            <Setter Property="IsItemClickEnabled" Value="True" />
        </Style>

        <!-- このページのListViewのstyle -->
        <Style x:Key="MyItemsListViewStyle" TargetType="ListView">
            <Setter Property="Padding" Value="10,0,0,60" />
            <Setter Property="SelectionMode" Value="None" />
            <Setter Property="IsSwipeEnabled" Value="False" />
            <Setter Property="Margin" Value="0,-10,0,0" />
            <Setter Property="IsItemClickEnabled" Value="True" />
        </Style>

    </Page.Resources>

    <!--
        このグリッドは 2 つの行を定義するページのルート パネルとして機能します:
        * 行 0 には [戻る] ボタンおよびページ タイトルが含まれます
        * 行 1 には残りのページ レイアウトが含まれます
    -->
    <Grid Style="{StaticResource LayoutRootStyle}">
        <Grid.RowDefinitions>
            <RowDefinition Height="140"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- ほとんどのビューステートで使用される水平スクロール グリッド-->
        <Grid
            x:Name="ItemViewGridForNotSnapped"
            Grid.Row="0" Grid.RowSpan="2">
            <SemanticZoom
                x:Name="ItemGridViewSemanticZoom"
                Visibility="{Binding Path=Groups.GroupType, Converter={StaticResource GroupTypeByConnectionCollapsedConverter}, Mode=OneWay}">

                <SemanticZoom.ZoomedInView>

                    <GridView
                        x:Name="itemGridView"
                        AutomationProperties.AutomationId="ItemGridView"
                        AutomationProperties.Name="Grouped Items"
                        ItemsSource="{Binding Source={StaticResource groupedItemsViewSource}}"
                        ItemTemplate="{StaticResource MyGroupedItemTemplateBasedOnStandard250x250ItemTemplate}"
                        Visibility="{Binding Path=Groups.UpdatingNow, Converter={StaticResource NegativeBooleanToVisiblityConverter}, Mode=OneWay}"
                        Style="{StaticResource MyItemsViewStyle}"
                        ItemClick="ItemView_ItemClick">

                        <GridView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <!-- デバイス一覧で大した数ではないのでVirtualizingではない普通のStackPanelを使う
                                 Virtualingはあまりにも遅い... 
                                 おそらく一つのグループに何十個もアイテムがあるとダメなのだろう... -->
                                <!--<VirtualizingStackPanel Orientation="Horizontal" />-->
                                <StackPanel Orientation="Horizontal"></StackPanel>
                            </ItemsPanelTemplate>
                        </GridView.ItemsPanel>
                        <!-- 個々に違うものに関してはstyle selectorじゃないとダメらしい -->
                        <GridView.ItemContainerStyle>
                            <Style TargetType="GridViewItem">
                                <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                <Setter Property="VerticalContentAlignment" Value="Stretch" />
                            </Style>
                        </GridView.ItemContainerStyle>
                        <GridView.GroupStyle>
                            <GroupStyle 
                                HeaderTemplate="{StaticResource MyGroupedItemHeaderTemplate}">
                                <GroupStyle.Panel>
                                    <ItemsPanelTemplate>
                                        <VariableSizedWrapGrid Orientation="Vertical" Margin="0,0,80,0"/>
                                    </ItemsPanelTemplate>
                                </GroupStyle.Panel>
                            </GroupStyle>
                        </GridView.GroupStyle>
                    </GridView>
                </SemanticZoom.ZoomedInView>
                <SemanticZoom.ZoomedOutView>
                    <GridView
                        x:Name="itemGridViewZoomedOut"
                        ScrollViewer.IsHorizontalScrollChainingEnabled="False"
                        ItemsSource="{Binding Source={StaticResource groupedItemsViewSource}, Path=CollectionGroups}"
                        ItemTemplate="{StaticResource MyGroupedItemTemplateForSemanticZoomOut}"
                        Visibility="{Binding Path=Groups.UpdatingNow, Converter={StaticResource NegativeBooleanToVisiblityConverter}, Mode=OneWay}"
                        Style="{StaticResource MyItemsViewStyle}">

                        <GridView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapGrid ItemWidth="300" ItemHeight="100" MaximumRowsOrColumns="7"></WrapGrid>
                            </ItemsPanelTemplate>
                        </GridView.ItemsPanel>
                    </GridView>
                </SemanticZoom.ZoomedOutView>
            </SemanticZoom>

            <!-- 接続別表示のツリービュー -->
            <local:DeviceItemTreeView
                x:Name="DeviceItemTreeView"
                Margin="0, 137, 0, 0"
                Visibility="{Binding Path=Groups.GroupType, Converter={StaticResource GroupTypeByConnectionVisibleConverter}, Mode=OneWay}"/>
        </Grid>

        <!-- スナップの場合のみ使用される垂直スクロール リスト -->
        <ListView
            x:Name="itemListView"
            AutomationProperties.AutomationId="ItemListView"
            AutomationProperties.Name="Grouped Items"
            Grid.Row="1"
            Visibility="Collapsed"
            ItemsSource="{Binding Source={StaticResource groupedItemsViewSource}}"
            ItemTemplate="{StaticResource MyGroupedItemTemplateBasedOnStandard80ItemTemplate}"
            Style="{StaticResource MyItemsListViewStyle}"
            ItemClick="ItemView_ItemClick">

            <ListView.GroupStyle>
                <GroupStyle HeaderTemplate="{StaticResource MyGroupedItemHeaderTemplate}" />
            </ListView.GroupStyle>
        </ListView>

        <!-- デバイスグループ更新中のProgressBar -->
        <ProgressBar 
            Grid.Row="0" Grid.RowSpan="2"
            IsIndeterminate="True"
            Visibility="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanToVisiblityConverter}, Mode=OneWay}"/>
        
        <!-- [戻る] ボタンおよびページ タイトル-->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button x:Name="backButton" Click="GoBack" IsEnabled="{Binding Frame.CanGoBack, ElementName=pageRoot}" Style="{StaticResource BackButtonStyle}"/>
            <TextBlock x:Name="pageTitle" Text="{Binding Source={StaticResource MyStringResource}, Path=[AppName]}" Grid.Column="1" IsHitTestVisible="false" Style="{StaticResource PageHeaderTextStyle}"/>
        </Grid>

        <!-- GroupType選択のPopup -->
        <Popup x:Name="GroupTypePopupMenu"
               IsLightDismissEnabled="True">
            <Popup.ChildTransitions>
                <TransitionCollection>
                    <PopupThemeTransition></PopupThemeTransition>
                </TransitionCollection>
            </Popup.ChildTransitions>
            <Popup.Resources>
                <Style TargetType="RadioButton" >
                    <Setter Property="Margin" Value="20, 5, 20, 5" />
                </Style>
            </Popup.Resources>
            <Border BorderThickness="1" BorderBrush="{StaticResource AppBarItemForegroundThemeBrush}" Loaded="GroupTypePopupMenu_Border_Loaded">
                <StackPanel Background="{StaticResource AppBarBackgroundThemeBrush}">
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByDeviceClass]}" Tag="ByDeviceClass" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByManufacturer]}" Tag="ByManufacturer" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByDriverProvider]}" Tag="ByDriverProvider" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByInstallDate]}" Tag="ByInstallDate" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByLastArrivalDate]}" Tag="ByLastArrivalDate" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                    <RadioButton Content="{Binding Source={StaticResource MyStringResource}, Path=[GroupTypeByConnection]}" Tag="ByConnection" Checked="GroupTypePopupMenu_RadioButton_Checked" IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"/>
                </StackPanel>
            </Border>
        </Popup>


        <VisualStateManager.VisualStateGroups>

            <!--表示状態には、アプリケーションのビューステートが反映されます -->
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="FullScreenLandscape"/>
                <VisualState x:Name="Filled"/>

                <!-- ページ全体では、縦方向に対して、より狭い 100 ピクセルの余白の規則を優先します -->
                <VisualState x:Name="FullScreenPortrait">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource PortraitBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>

                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="itemGridView" Storyboard.TargetProperty="Padding">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="96,137,10,56"/>
                        </ObjectAnimationUsingKeyFrames>

                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="itemGridViewZoomedOut" Storyboard.TargetProperty="Padding">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="96,137,10,56"/>
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

                <!--
                    スナップの場合、[戻る] ボタンとタイトルには異なるスタイルが使用され、他のすべてのビューステートで表示されるグリッドに対して
                    一覧の表現が置き換えられます
                       GridView: 非表示になる
                       ListView: 表示になる
                -->
                <VisualState x:Name="Snapped">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedBackButtonStyle}"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="pageTitle" Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource SnappedPageHeaderTextStyle}"/>
                        </ObjectAnimationUsingKeyFrames>

                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="itemListView" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="Visible"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemViewGridForNotSnapped" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                        </ObjectAnimationUsingKeyFrames>
                        
                        <!--<ObjectAnimationUsingKeyFrames Storyboard.TargetName="ItemGridViewSemanticZoom" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeviceItemTreeView" Storyboard.TargetProperty="Visibility">
                            <DiscreteObjectKeyFrame KeyTime="0" Value="Collapsed"/>
                        </ObjectAnimationUsingKeyFrames>-->
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

    <!-- AppBar -->
    <Page.BottomAppBar>
        <AppBar Background="LightGray" Loaded="BottomAppBar_Loaded" Unloaded="BottomAppBar_Unloaded">
            <StackPanel Orientation="Horizontal">
                <!-- 並び替えボタン -->
                <Button x:Name="AppBarGroupTypeButton" 
                    Style="{StaticResource AppBarButtonStyle}" 
                    Content="&#xE174;" 
                    AutomationProperties.Name="{Binding Source={StaticResource MyStringResource}, Path=[AppBarGroupTypeButton]}"
                    AutomationProperties.AutomationId="GroupTypeButton"
                    Click="AppBarGroupTypeButton_Click">
                </Button>

                <!-- 非表示デバイスの表示ボタン -->
                <ToggleButton x:Name="AppBarShowHiddenDevicesButton" 
                    Style="{StaticResource AppBarButtonStyle}" 
                    Content="&#xE10C;" 
                    AutomationProperties.Name="{Binding Source={StaticResource MyStringResource}, Path=[AppBarShowHiddenDevicesButton]}"
                    AutomationProperties.AutomationId="AppBarShowHiddenDevicesButton" 
                    IsChecked="{Binding Path=Groups.ShouldShowNotShownDevice, Mode=TwoWay}"
                    IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}"
                    Click="AppBarShowHiddenDevicesButton_Click">
                </ToggleButton>

                <!-- 更新ボタン -->
                <Button x:Name="AppBarUpdateButton" 
                    Style="{StaticResource AppBarButtonStyle}" 
                    Content="&#xE14A;" 
                    AutomationProperties.Name="{Binding Source={StaticResource MyStringResource}, Path=[AppBarUpdateButton]}"
                    AutomationProperties.AutomationId="UpdateButton"
                    Click="AppBarUpdateButton_Click"
                    IsEnabled="{Binding Path=Groups.UpdatingNow, Converter={StaticResource BooleanNegationConverter}, Mode=OneWay}">
                </Button>

            </StackPanel>

        </AppBar>
    </Page.BottomAppBar>

</common:LayoutAwarePage>
